<template>
    <div>
        <img src="../assets/word.svg" alt id="robot" @click="toTalk" style="cursor:pointer"/>
        <div id="box" :style=" flag ? 'display:none':'display:block'">
            <!-- ‰∏ª‰Ωì -->
            <div class="container">
                <div id="header">
                    <span style="display:inline-block">ÂêçÂ≠ó</span>
                    <p>
                        <span @click="changeSize" style="font-size:22px;cursor:pointer;color:#fff;display:inline-block">üî≥</span>
                        <!--Ëøô‰∏™ÊñπÂùóÊòØÊàëÊáíÂæóÂºïÂÖ•iconÂõæÊ†áÈöè‰æøÂ§çÂà∂ÁöÑÔºå‰∏çË¶ÅÂ≠¶ÊàëÁúÅ‰∫ãÔºåÂõ†‰∏∫ÊúâÁöÑÊµèËßàÂô®ÂèØËÉΩ‰∏çÊòæÁ§∫-->
                        <span
                                @click="yc"
                                style="cursor: pointer;font-size:22px;display:inline-block;margin-left:10px;color:#fff;"
                        >‚úñ</span>
                    </p>
                </div>
                <!-- ËÅäÂ§©ÂÜÖÂÆπÊòæÁ§∫Âå∫ -->
                <div class="cBox">
                    <div class="contents" ref="chattingContent" id="chattingContents">
                        <div v-for="(item,index) in msgs" :key="index">
                            <div class="userQuestion self" v-if="item.self">
                                <p class="question">{{item.content}}</p>
                                <img :src="item.avatarUrl" alt class="uImg"/>
                            </div>
                            <div class="robotAnswer other clearfix" v-else>
                                <img :src="item.avatarUrl" alt class="rImg"/>
                                <div class="answerContent">
                                    <p class="q">{{item.q}}</p>
                                    <p class="a">{{item.a}}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Áî®Êà∑ÈóÆÈ¢òËæìÂÖ•Âå∫ -->
                    <div class="userInput">
                        <div class="tBox">
              <textarea
                      class="ipt"
                      placeholder="ÂºÄÂßãËÅäÂ§©"
                      @keyup.enter="sendMsgs"
                      v-model.trim="inputContent"
              ></textarea>
                        </div>
                        <el-button @click="sendMsgs">Âèë ÈÄÅ</el-button>
                        <!--                        <vp-button type="primary" @click="sendMsgs">Âèë ÈÄÅ</vp-button>-->
                    </div>
                </div>
            </div>
            <!-- ÂÆûÁé∞ÊãñÊãΩÂØπËØùÊ°ÜÂíåÊãñÊãΩËæπÊîæÂ§ß -->
            <div
                    id="resizeL"
                    style="position:absolute;overflow:hidden;opacity:0;filter:alpha(opacity=0);top:0;width:5px;height:100%;cursor:w-resize;"
            ></div>
            <div
                    id="resizeT"
                    style="position:absolute;overflow:hidden;opacity:0;filter:alpha(opacity=0);width:100%;height:5px;cursor:n-resize;top:0;"
            ></div>
            <div
                    id="resizeR"
                    style="position:absolute;overflow:hidden;opacity:0;filter:alpha(opacity=0);top:0;width:5px;height:100%;cursor:w-resize;right:0;"
            ></div>
            <div
                    id="resizeB"
                    style="position:absolute;overflow:hidden;opacity:0;filter:alpha(opacity=0);width:100%;height:5px;cursor:n-resize;bottom:0;"
            ></div>
        </div>
    </div>
</template>
<script>
    // import {getRobotAnswer} from '@/api/smartManage';
    import userImg from '../assets/logo.svg';
    import robotImg from '../assets/logo.png';

    export default {
        name: "ChatBox",
        data() {
            return {
                msgs: [], //Áî®Êù•Â≠òÊîæÂØπËØù
                inputContent: '',
                oContent: {},
                flag: true,
                flag2: true,
                //ÊàëÂÆö‰πâflagflag2ÁöÑÂàùË°∑ÊòØ‰∏∫‰∫ÜÂΩìÊàëÁÇπÂáªÊñπÂùóÊîæÂ§ßÂØπËØùÊ°ÜÂêéÔºåÁÇπÂáªxÈöêËóèÂØπËØùÊ°ÜÔºåÂΩìÊàëÂÜçÊ¨°ÂëºÂá∫ÂØπËØùÊ°ÜÊó∂ÔºåÊÉ≥ËÆ©ÂØπËØùÊ°ÜÁöÑÂ§ßÂ∞è‰∏∫Ê≠£Â∏∏Â§ßÂ∞è
                //ËÄå‰∏çÊòØÊîæÂ§ßÂêéÁöÑÂ§ßÂ∞è„ÄÇÂ¶ÇÊûú‰Ω†Ê≤°ÊúâÁÇπÂáªÊñπÂùóÊîæÂ§ßÁöÑÈúÄÊ±ÇÔºåËøôÈÉ®ÂàÜÂèØ‰ª•‰∏çÁî®ÂÜô„ÄÇ
            };
        },
        mounted() {
            this.oContent = document.getElementById('chattingContents');
            setTimeout(() => {
                this.$refs.chattingContent.scrollTop = this.$refs.chattingContent.scrollHeight;
            }, 0);

            function dragable(id) {
                let d = document,
                    o = d.getElementById(id),
                    x,
                    y,
                    p = 'ondrag';
                o.ondragstart = function (e) {
                    e = e || event;
                    x = e.clientX - o.offsetLeft;
                    y = e.clientY - o.offsetTop;
                    d.ondragend = function (e) {
                        e = e || event;
                        o.style.left = e.clientX - x + 'px';
                        o.style.top = e.clientY - y + 'px';
                    };
                };
            }

            function drag(oDrag, handle) {
                let disX = 0;
                let disY = 0;
                handle = handle || oDrag;
                handle.style.cursor = 'move';
                handle.onmousedown = function (e) {
                    let event = event || window.event;
                    disX = event.clientX - oDrag.offsetLeft;
                    disY = event.clientY - oDrag.offsetTop;
                    document.onmousemove = function (e) {
                        let event = event || window.event;
                        let iL = event.clientX - disX;
                        let iT = event.clientY - disY;
                        let maxL = document.documentElement.clientWidth - oDrag.offsetWidth;
                        let maxT = document.documentElement.clientHeight - oDrag.offsetHeight;
                        iL <= 0 && (iL = 0);
                        iT <= 0 && (iT = 0);
                        iL >= maxL && (iL = maxL);
                        iT >= maxT && (iT = maxT);
                        oDrag.style.left = iL + 'px';
                        oDrag.style.top = iT + 'px';
                        return false;
                    };
                    document.onmouseup = function () {
                        document.onmousemove = null;
                        this.releaseCapture && this.releaseCapture();
                    };
                    this.setCapture && this.setCapture();
                    return false;
                };
            }

            let dragMinWidth = 500;
            let dragMinHeight = 450;

            function resize(oParent, handle, isLeft, isTop, lockX, lockY) {
                handle.onmousedown = function (e) {
                    let event = event || window.event;
                    let disX = event.clientX - handle.offsetLeft;
                    let disY = event.clientY - handle.offsetTop;
                    let iParentTop = oParent.offsetTop;
                    let iParentLeft = oParent.offsetLeft;
                    let iParentWidth = oParent.offsetWidth;
                    let iParentHeight = oParent.offsetHeight;
                    document.onmousemove = function (e) {
                        let event = event || window.event;
                        let iL = event.clientX - disX;
                        let iT = event.clientY - disY;
                        let maxW =
                            document.documentElement.clientWidth - oParent.offsetLeft - 2;
                        let maxH =
                            document.documentElement.clientHeight - oParent.offsetTop - 2;
                        let iW = isLeft ? iParentWidth - iL : handle.offsetWidth + iL;
                        let iH = isTop ? iParentHeight - iT : handle.offsetHeight + iT;
                        isLeft && (oParent.style.left = iParentLeft + iL + 'px');
                        isTop && (oParent.style.top = iParentTop + iT + 'px');
                        iW < dragMinWidth && (iW = dragMinWidth);
                        iW > maxW && (iW = maxW);
                        lockX || (oParent.style.width = iW + 'px');
                        iH < dragMinHeight && (iH = dragMinHeight);
                        iH > maxH && (iH = maxH);
                        lockY || (oParent.style.height = iH + 'px');
                        if ((isLeft && iW == dragMinWidth) || (isTop && iH == dragMinHeight))
                            document.onmousemove = null;
                        return false;
                    };
                    document.onmouseup = function () {
                        document.onmousemove = null;
                        document.onmouseup = null;
                    };
                    return false;
                };
            }

            let oDrag = document.getElementById('box');
            let oL = document.getElementById('resizeL');
            let oT = document.getElementById('resizeT');
            let oR = document.getElementById('resizeR');
            let oB = document.getElementById('resizeB');
            let oTitle = document.getElementById('header');
            drag(oDrag, oTitle);
            resize(oDrag, oL, true, false, false, true);
            resize(oDrag, oT, false, true, true, false);
            resize(oDrag, oR, false, false, false, true);
            resize(oDrag, oB, false, false, true, false);
            oDrag.style.left =
                (document.documentElement.clientWidth - oDrag.offsetWidth) / 2 + 'px';
            oDrag.style.top =
                (document.documentElement.clientHeight - oDrag.offsetHeight) / 2 + 'px';
            dragable('robot');
        },
        methods: {
            //ÁÇπxÈöêËóèÂØπËØùÊ°Ü
            yc() {
                let box = document.getElementById('box');
                box.style.display = 'none';
                this.flag = !this.flag;
            },
            //ÁÇπÂáª‰Ω†ÊîæÂ•ΩÁöÑÂõæÊ†áÊàñËÄÖÂùóÂá∫Áé∞ÂØπËØùÊ°Ü
            toTalk() {
                if (!this.flag2) {
                    this.flag = !this.flag;
                    let box = document.getElementById('box');
                    box.style.width = '500px';
                    box.style.height = '450px';
                    box.style.left = '33%';
                    box.style.top = '20%';
                    this.flag2 = !this.flag2;
                } else {
                    this.flag = !this.flag;
                    let box = document.getElementById('box');
                    box.style.width = '500px';
                    box.style.height = '450px';
                    box.style.left = '33%';
                    box.style.top = '20%';
                }
            },
            //ÁÇπÂáªÊîæÂ§ßÂØπËØùÊ°Ü
            changeSize() {
                if (this.flag2) {
                    let box = document.getElementById('box');
                    box.style.width = '100%';
                    box.style.height = '100%';
                    box.style.left = '0';
                    box.style.top = '0';
                    this.flag2 = !this.flag2;
                } else {
                    let box = document.getElementById('box');
                    box.style.width = '500px';
                    box.style.height = '450px';
                    box.style.left = '33%';
                    box.style.top = '20%';
                    this.flag2 = !this.flag2;
                }
            },
            //ÂèëÈÄÅÊ∂àÊÅØ
            sendMsgs() {
                this.oContent.scrollTop = this.oContent.scrollHeight;
                if (this.inputContent === '') {
                    return;
                }
                this.msgs.push({
                    content: this.inputContent,
                    avatarUrl: userImg,
                    self: true,
                });
                //selfÁöÑ‰ΩúÁî®ÊòØ‰∏∫‰∫ÜÂà§Êñ≠ÊòØÁî®Êà∑ËøòÊòØÊú∫Âô®‰∫∫ÔºåÁî®Êà∑ÁöÑËØùÊ∏≤ÊüìÂú®ÂØπËØùÊ°ÜÁöÑÂè≥ËæπÔºåÊú∫Âô®‰∫∫ÁöÑÂõûÁ≠îÊ∏≤ÊüìÂú®ÂØπËØùÊ°ÜÁöÑÂ∑¶Ëæπ
                this.getResult();
                setTimeout(() => {
                    this.$refs.chattingContent.scrollTop = this.$refs.chattingContent.scrollHeight;
                }, 0);
                this.inputContent = '';
            },
            //Êô∫ËÉΩÊú∫Âô®‰∫∫ÂõûÂ§ç
            getResult() {
                // eslint-disable-next-line @typescript-eslint/no-this-alias
                let that = this;
                let paramData = {
                    //‰∏Ä‰∫õÈúÄË¶ÅÁöÑÂèÇÊï∞
                };
                // getRobotAnswer(paramData)
                //     .then(res => {
                //         let data = res.data.rep;
                //         for (let i = 0; i < data.length; i++) {
                //             let arr = data[i];
                //             let q = arr.q;
                //             let a = arr.a;
                //             this.msgs.push({
                //                 q: q,
                //                 a: a,
                //                 avatarUrl: robotImg,
                //                 self: false,
                //             });
                //         }
                //         this.$refs.chattingContent.scrollTop = this.$refs.chattingContent.scrollHeight;
                //     })
                //     .catch(err => {
                //         console.log(err);
                //     });
            },
        },
    };
</script>
<style lang="css" scoped>
    #robot {
        position: absolute;
        bottom: 50px;
        right: 100px;
        width: 40px;
        height: 70px;
        z-index: 9999;
    }

    #box {
        position: absolute;
        width: 500px;
        height: 450px;
        top: 20%;
        left: 33%;
        z-index: 8888;
        background: rgb(195, 218, 226);
        border-radius: 5px;
        display: none;
    }

    .uImg,
    .rImg {
        width: 40px;
        height: 40px;
    }

    .container {
        height: 100%;
        border-radius: 5px;
    }

    #header {
        height: 35px;
        line-height: 35px;
        padding: 6px 15px;
        color: #fff;
        font-size: 20px;
        background: rgb(219, 74, 70);
        border-top-right-radius: 5px;
        border-top-left-radius: 5px;
        display: flex;
        justify-content: space-between;
        user-select: none;
    }

    .cBox {
        height: 90%;
    }

    .contents {
        height: 85%;
        overflow: auto;
        display: flex;
        flex-direction: column;
        align-content: flex-start;
        padding: 4px 10px;
        background: #fff;
    }

    .self {
        float: right;
        height: 40px;
        margin-bottom: 20px;
    }

    .other {
        position: relative;
    }

    .clearfix::before {
        display: block;
        content: '';
        clear: both;
    }

    .answerContent {
        padding: 0 6px;
        line-height: 30px;
        background: rgb(80, 126, 164);
        border-radius: 6px;
        color: #fff;
        margin-left: 50px;
        margin-bottom: 10px;
    }

    .answerContent p {
        color: #fff;
    }

    .rImg {
        position: absolute;
        left: 0;
        top: 0;
    }

    .question {
        padding: 0 6px;
        height: 40px;
        line-height: 40px;
        background: rgb(245, 225, 152);
        border-radius: 6px;
        color: #333;
        margin-right: 10px;
    }

    img {
        display: inline-block;
    }

    .userQuestion {
        display: flex;
        justify-content: flex-start;
    }

    .userInput {
        padding: 10px 10px;
        height: 8%;
        display: flex;
        justify-content: space-between;
    }

    .tBox {
        width: 80%;
        height: 30px;
        border-radius: 6px;
        background: rgb(242, 245, 242);
    }

    .ipt {
        width: 100%;
        padding-left: 10px;
        height: 30px;
        line-height: 30px;
        resize: none;
        border: none;
        outline: none;
    }

    .vp-button--primary {
        width: 15%;
        background: rgb(80, 126, 164);
        color: #fff;
        font-weight: 600;
        line-height: 30px;
        height: 30px;
        padding: 0;
        border: none;
    }
</style>
