<template>
    <div id="rich-text">
        <div>
            <h2>建立连接</h2>
            <label>
                <span>token:</span>
                <input type="text" v-model="token"/>
            </label>
            <label>
                <span>author:</span>
                <input type="text" v-model="author">
            </label>
            <button @click="connectServer">连接</button>
        </div>
        <hr>
        <div>
            <h2>全文本测试</h2>
            <label>
                <span>原始数据：</span>
                <textarea v-model="html" rows="10" cols="50"></textarea>
            </label>
            <br>
            <button @click="op1">op1</button>
        </div>
        <hr>
        <div>
            <h2>Ot算法测试</h2>
            <label>
                <input type="text" v-model="before">
            </label>
            <label><span> -> </span>
                <input type="text" v-model="after">
            </label>
            <button @click="opt">Ot</button>
            <p>{{result}}</p>
        </div>
        <div>
            <h2>Delta测试
                <button @click="undo">撤销</button>
                <button @click="redo">重做</button>
            </h2>
            <label>
                <span>暂停</span>
                <input type="checkbox" v-model="pause">
            </label>
            <br>
            <textarea v-model="text"></textarea>
        </div>
        <hr>
        <Editor ref="editor" :doc="doc" :author="author"/>
        <hr>
        <label>
            <span>直接操作数据库</span>
            <textarea v-model="ops"></textarea>
            <button @click="submitOps">提交</button>
        </label>
    </div>
</template>

<script>
    import * as StringUtils from "../util/StringUtils";
    import Editor from "../components/Editor";
    // import Ot from "../util/Ot";
    import Ot from "../util/ot2";

    import ReconnectingWebSocket from "reconnecting-websocket";

    const sharedb = require("sharedb/lib/client");
    const json1 = require("ot-json1");


    sharedb.types.register(json1.type);


    // 服务地址
    const serverUrl = "ws://192.168.31.123:9000";

    // const ot = new Ot();

    export default {
        name: "RichText",
        data() {
            return {
                author: "1",
                token: "1",
                ready: false,
                doc: null,
                socket: null,
                collectionName: "mul-sharedb-test",

                before: "",
                after: "",
                result: "",

                text: "",
                undo_list: [],
                redo_list: [],

                lock: false,
                pause: true,

                ops: [],

                html: ""
            }
        },
        methods: {
            /**
             * 连接服务器
             */
            connectServer() {
                if (!StringUtils.isEmpty(this.token) && !StringUtils.isEmpty(this.author)) {
                    // 连接服务
                    this.socket = new ReconnectingWebSocket(`${serverUrl}?token=${this.token}`);
                    // 连接 sharedb
                    let connection = new sharedb.Connection(this.socket);
                    // 获取文档
                    this.doc = connection.get(this.collectionName, this.token);
                    // 订阅文档
                    this.subscribeDoc();
                }
            },
            subscribeDoc() {
                if (this.doc !== null) {
                    this.doc.subscribe(err => {
                        if (err) {
                            console.error("订阅文档失败，error:", err);
                            this.doc.destroy();
                            throw err;
                        }
                        // 订阅文档成功，读取数据成功
                        if (this.doc.data !== undefined || this.doc.type !== undefined) {
                            console.log("订阅文档成功")
                            // 如果未初始化，则初始化编辑器
                            if (!this.ready) {
                                // this.$refs.editor.initEditor();
                                this.html = this.doc.data.data.html;
                                this.ready = true;
                                setTimeout(() => {
                                    this.pause = false;
                                }, 1000);
                                // 开始监听 op 操作
                                this.doc.on('op', (op, source) => {
                                    console.log(`接收到操作\t op:${JSON.stringify(op)}\t source:${source}`)
                                    if (source) {
                                        console.log("操作来自本地");
                                    } else {
                                        console.log("操作来自服务器，接收");
                                        this.pause = true;
                                        this.html = StringUtils.strToUtf16(this.doc.data.data.html);
                                        setTimeout(() => {
                                            this.pause = false;
                                        }, 500);
                                        // this.$refs.editor.updateEditor();
                                    }
                                });
                            }
                        } else {
                            console.error("读取文档数据失败");
                            this.doc.destroy();
                        }
                    });
                }
            },

            opt() {
                console.log(`${this.before} -> ${this.after}`);
                let ops = Ot.diff(this.before, this.after);
                console.log(JSON.stringify(ops));
            },

            op1() {
                this.doc.submitOp(['data', ['html', {
                    es: [1, "ul><li", {"d": 2}, 6, "li></ul", {"d": 2}]
                }]]);
            },

            undo() {
                if (this.undo_list.length > 0) {
                    try {
                        console.log(this.text);
                        let ops = this.undo_list.pop();
                        console.log(`上一次操作:\t${JSON.stringify(ops)}`);
                        let invertOps = Ot.invert(ops);
                        console.log(`undo操作:\t${JSON.stringify(invertOps)}`);
                        this.lock = true;
                        this.text = Ot.apply(this.text, invertOps);
                        this.redo_list.push(invertOps);
                    } catch (e) {
                        console.warn("undo失败，数据已被其他用户修改");
                    }
                } else {
                    console.warn("没有undo操作");
                }
            },

            redo() {
                if (this.redo_list.length > 0) {
                    try {
                        console.log(this.text);
                        let ops = this.redo_list.pop();
                        console.log(`上一次操作:\t${JSON.stringify(ops)}`);
                        let invertOps = Ot.invert(ops);
                        console.log(`redo操作:\t${JSON.stringify(invertOps)}`);
                        this.lock = true;
                        this.text = Ot.apply(this.text, invertOps);
                        this.undo_list.push(invertOps);
                    } catch (e) {
                        console.warn("redo失败，数据已被其他用户修改");
                    }
                } else {
                    console.warn("没有redo操作");
                }
            },

            submitOps() {
                // let ops = JSON.parse(this.ops);
                // console.log(ops);
                this.doc.submitOp(["data", {r: 0}]);
            }
        },
        watch: {
            text(newVal, oldVal) {
                if (this.lock) {
                    this.lock = false;
                    return;
                }
                if (this.pause) {
                    console.log("暂停记录");
                    return;
                }
                let ops = Ot.diff(oldVal, newVal);
                console.log(JSON.stringify(ops));
                this.undo_list.push(ops);
            },

            html(newVal, oldVal) {
                if (this.pause) {
                    console.log("暂停记录");
                    return;
                }
                console.log(`${oldVal} -> ${newVal}`);
                let diff = Ot.diff(this.doc.data.data.html, StringUtils.utf16ToStr(newVal));
                this.doc.submitOp(['data', ['html', {
                    es: diff
                }]]);
            }
        },
        components: {
            Editor,
        }
    }
</script>

<style scoped>

</style>