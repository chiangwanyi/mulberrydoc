<template>
    <div id="editor">
        <div id="container"></div>
    </div>
</template>

<script>
    // import * as StringUtils from "../util/StringUtils";
    import E from "wangeditor";
    import Ot from "../util/ot2";

    const INDEX_ATTR = "index";
    // const ID_SPLIT = "-";
    const INDEX_REG = new RegExp("([0-9]+)-([0-9]+)");

    export default {
        name: "Editor",
        data() {
            return {
                // 监听编辑器内容变化锁
                lock: true,
                editor: null,
                flag: false,
                // 下一次的变更序号
                // nextIndex: -1,
            }
        },
        methods: {
            /**
             * 初始化编辑器
             */
            initEditor() {
                if (this.editor === null) {
                    console.log("开始初始化编辑器");
                    // 填充内容
                    document.getElementById("container").innerHTML = this.getData();
                    // 创建编辑器实例
                    this.editor = new E('#container');
                    // 监听本地变更
                    this.editor.config.onchange = this.onChange;
                    // this.editor.config.onchangeTimeout = 20000 // 修改为 500ms
                    this.editor.create();
                    // this.fillSeq();
                    console.log("初始化编辑器成功");
                    this.lock = false;
                } else {
                    console.warn("编辑器已初始化");
                }
            },
            /**
             * 从文档的数据中更新编辑器
             */
            syncData() {
                // 锁定内容
                this.lock = true;
                // let text = this.getData();
                // 解锁，继续监听变更
                this.lock = false;
            },
            /**
             * 处理内容变更
             */
            onChange() {
                if (this.lock) {
                    console.warn("内容锁定中")
                    return;
                }
                // this.updateEditor();
                this.submitOption();
                // 解锁，继续监听变更
                this.lock = false;
            },
            updateEditor() {

            },
            submitOption() {
                console.log("===== 开始分析操作 =====");
                // console.log("===== 分析完成 =====");
                // console.log("===== 提交操作 =====");
            },
            /**
             * 获取文档的数据
             * @returns {string} 数据
             */
            getData() {
                let text = "";
                // 获取最新数据
                this.doc.data.data.forEach(el => {
                    text += el.text;
                });
                // console.log("当前最新数据：");
                // console.log(text);
                return text;
            },
            /**
             * 填充变更序号
             */
            fillSeq() {
                this.flag = false;
                let element = document.getElementById(this.editor.textElemId);
                // 记录出现过的序号
                let indexList = [];
                // 记录有问题的节点下标
                let errorIndexList = [];
                for (let i = 0; i < element.children.length; i++) {
                    // 节点
                    let el = element.children.item(i);

                    // 如果节点是末尾空行，移除index属性并跳过
                    if (i === element.children.length - 1 && el.innerHTML === "<br>") {
                        element.children.item(i).removeAttribute(INDEX_ATTR);
                        continue;
                    }
                    // 序号
                    let seq = INDEX_REG.exec(el.getAttribute(INDEX_ATTR));
                    // 如果序号格式错误
                    if (seq === null) {
                        errorIndexList.push(i);
                    } else {
                        let author = seq[1];
                        let index = parseInt(seq[2]);
                        // 如果序号是当前用户的序号
                        if (this.author === author) {
                            // 已经包含了该序号
                            if (indexList.includes(index)) {
                                errorIndexList.push(i);
                            } else {
                                indexList.push(index)
                            }
                        }
                    }
                }
                // 获得下一序号
                let nextIndex = Math.max(...indexList) + 1;
                // 修改有问题的序号
                errorIndexList.forEach(i => {
                    console.log("bababab");
                    element.children.item(i).setAttribute(INDEX_ATTR, `${this.author}-${nextIndex++}`);
                })
                this.flag = true;
            },
            contentHash() {
                let element = document.getElementById(this.editor.textElemId);
                let newTextArray = [];
                let oldTextArray = [];
                for (let i = 0; i < element.children.length; i++) {
                    let node = element.children.item(i);
                    newTextArray.push(node.outerHTML);
                }
                this.doc.data.data.forEach(el => {
                    oldTextArray.push(el.text);
                });
                console.time("Ot");
                let map = Ot.map(oldTextArray, newTextArray);
                console.timeEnd("Ot");
                console.log(JSON.stringify(Ot.completeDiff(map.hashA, map.hashB)));
                console.log(map);
            }
        },
        props: {
            doc: Object,
            author: String,
        },
    }
</script>

<style scoped>

</style>